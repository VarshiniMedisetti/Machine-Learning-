# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mI0A-oFVxcT32CBOeSxEa_PLs2-TprNP

Importing the Dependencies
"""

import numpy as np
# numpy arrays
#data frames are by pandas
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection & Pre processing

"""

# loading data from csp file to a pandas data file
raw_mail_data=pd.read_csv('/content/mail_data.csv')

print( raw_mail_data)

#replace the null values with null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

#printing the 1st 5rows of the dataframe
mail_data.head()

#checking the number of rows and coloums in the data frame
mail_data.shape

"""Label Encoding

"""

#label spam mail as 0 and ham mail as 1;

mail_data.loc[mail_data['Category'] == 'spam','Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham','Category',] = 1

"""Spam=0
ham=1
"""

#separating the data as text and labels
x = mail_data['Message']

y=mail_data['Category']

print (x)

print (y)

"""Splitting the data into training data and test data

"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=3 )

print(x.shape)
print(x_train.shape)
print(x_test.shape)

"""Feature extraction"""

# Transform the text data to feature vectors for Logistic Regression
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)
x_train_features = feature_extraction.fit_transform(x_train)
x_test_features = feature_extraction.transform(x_test)

# Convert y_train and y_test values to integers
y_train = y_train.astype(int)
y_test = y_test.astype(int)

print(x_train)

print(x_train_features)

"""Logistic Regression

"""

model = LogisticRegression()

#training the logistic regression model with training data
model.fit(x_train_features,y_train)

"""Evaluating the trained model

"""

#prediction on training data

prediction_on_training_data = model.predict(x_train_features)
accuracy_score_on_training_data = accuracy_score(y_train,prediction_on_training_data)

print('Accuracy on training data :',accuracy_score_on_training_data)

#prediction on test data

prediction_on_test_data = model.predict(x_test_features)
accuracy_score_on_test_data = accuracy_score(y_test,prediction_on_test_data)

print('Accuracy on test data :',accuracy_score_on_test_data)

"""Bulding a predictive system"""

input_mail=["U dun say so early hor... U c already then say..."]
#convert text to feature vectors
input_data_features=feature_extraction.transform(input_mail)
#making predictions
prediction=model.predict(input_data_features)
print(prediction)

if prediction[0]==1 :
  print("Ham mail")
else:
  print("Spam mail")

